#!/usr/bin/env bash

##
# This script is for converting a tree markdown file into an html file.
# The script needs path to an markdown file with tree information as an argument.
# The result will be passed to stdout.
# In order to get an html file with the Russian course you will need to execute
# someting like this:
# ./utils/md2html markdown/tree_en_ru_ver2.dm > html/tree_en_ru_ver2.html
##

source="$1"
pass=1
source_line=0
scan_state="start_document"
menu_items=""
skills_cnt=0

if [ -z "$source" ]; then
	>&2 echo "Missed parameter!"
	>&2 echo "Usage: $0 <source_file.md>"
	exit 1
fi
if [ ! -f "$source" ]; then
	>&2 echo "Failed! Source file \"$source\" doesn't exist"
	exit 2
fi

die() {
	>&2 echo "Failed at line ${source_line}:"
	>&2 echo "$1"
	exit 3
}

html_escape() {
	local s
	s=${1//&/&amp;}
	s=${s//</&lt;}
	s=${s//>/&gt;}
	s=${s//\"/&quot;}
	printf %s "$s"
}

url_escape() {
	s=${1//\"/%22}
	printf %s "$s"
}

start_document() {
	local title
	title="$(echo "$1" | sed "s|^TITLE: \\(.\\+\\)$|\\1\\t|" | cut -sf1)"
	if [ -z "$title" ]; then
		die "TITLE missed"
	fi
	local lang
	lang="$(echo "$title" | sed "s|^.\\+ / \\([[:upper:]][[:upper:]]\\)\\>.*$|\\1\\t|" | cut -sf1 | tr "[:upper:]" "[:lower:]")"
	if [ -z "$lang" ]; then
		die "Can't find a language marker in the title"
	fi
	if [ "$pass" = "2" ]; then
		local skills_str
		case "$lang" in
			"ru")
				skills_str="навыков"
				;;
			"de")
				skills_str="Fähigkeiten"
				;;
			"pt")
				skills_str="habilidades"
				;;
			"es")
				skills_str="habilidades"
				;;
			*)
				skills_str="skills"
				;;
		esac
		if ! echo "$title" | grep -q "(.\\+)$"; then
			title="${title} (${skills_cnt} ${skills_str})"
		fi
		title="$(html_escape "$title")"
		printf "\
<!DOCTYPE html>
<html lang=\"%s\">
<head>
	<title>%s</title>
	<meta charset=\"UTF-8\" />
	<meta name=\"author\" content=\"Liuch, FieryCat\" />
	<link rel=\"stylesheet\" href=\"../css/menu.css\" type=\"text/css\" />
	<link rel=\"stylesheet\" href=\"../css/tree.css\" type=\"text/css\" />
	<script src=\"../js/main.js\"></script>
</head>
<body id=\"tree-page\">
%s
	<h1>%s</h1>
" "$(html_escape "$lang")" "$title" "$(generate_menu "$lang")" "$title"
	fi
	scan_state="start_section"
}

generate_menu() {
	local info_item
	case "$1" in
		"ru")
			info_item="Информация"
			;;
		"pt")
			info_item="Informação"
			;;
		"es")
			info_item="Información"
			;;
		*)
			info_item="Information"
			;;
	esac
	printf "\
	<div id=\"menu-button\">
		<input id=\"menu-toggle\" type=\"checkbox\" />
		<div class=\"button-decor\"></div>
		<label class=\"toggle-button\" for=\"menu-toggle\"></label>
		<ul class=\"menu-box\">%s
			<li><a href=\"#information\">%s</a></li>
		</ul>
	</div>
" "$menu_items" "$info_item"
}

bold_header_parts() {
	# shellcheck disable=SC2001
	echo "$1" | sed "s|^## \\*\\*\\(.\\+\\)\\*\\*$|\\1\\t|"
}

ul_element_parts() {
	# shellcheck disable=SC2001
	echo "$1" | sed "s|^\\$2 \\(.\\+\\): \\(.\\+\\)$|\\1\\t\\2|"
}

link_element_parts() {
	# shellcheck disable=SC2001
	echo "$1" | sed "s|^\\[\\(.\\+\\)\\](\\(.\\+\\))$|\\1\\t\\2|"
}

output_li() {
	if [ -n "$2" ]; then
		printf "\t\t<li>%s: %s</li>\n" "$(html_escape "$1")" "$(html_escape "$2")"
	else
		printf "\t\t<li>%s</li>\n" "$(html_escape "$1")"
	fi
}

start_section() {
	local section
	section="$(bold_header_parts "$1" | cut -sf1)"
	if [ -z "$section" ]; then
		die "Incorrect section string"
	fi
	local section_num
	section_num="$(echo "$section" |  grep -o "[[:digit:]]\\+$")"
	if [ -z "$section_num" ]; then
		start_general_info
		return
	fi
	local section_id
	section_id="tree-part-${section_num}"
	if [ "$pass" = "2" ]; then
		printf "\t<h2 id=\"%s\" class=\"skills-section\">%s</h2>\n" "$section_id" "$(html_escape "$section")"
	else
		menu_items="$(printf "%s\n\t\t\t<li><a href=\"#%s\">%s</a></li>" "$menu_items" "$section_id" "$(html_escape "$section")")"
	fi
	scan_state="start_skill"
}

start_skill() {
	local skill
	local name
	local url
	local l_name
	local t_name
	local t_url
	# shellcheck disable=SC2001
	skill="$(echo "$1" | sed "s|^## \\[\\(.\\+\\)\\](\\([^)]\\+\\))\\( - .\\+\\)\\? \\\\\\[\\[\\(.\\+\\)\\](\\(.\\+\\))\\\\\\]$|\\1\\t\\2\\t\\3\\t\\4\\t\\5|")"
	name="$(echo "$skill" | cut -sf1)"
	if [ -z "$name" ]; then
		# shellcheck disable=SC2001
		skill="$(echo "$1" | sed "s|^## \\[\\(.\\+\\)\\](\\(.\\+\\))\\( - .\\+\\)\\?$|\\1\\t\\2\\t\\3\\t\\t|")"
		name="$(echo "$skill" | cut -sf1)"
		if [ -z "$name" ]; then
			die "Incorrect skill name"
		fi
	fi
	url="$(echo "$skill" | cut -sf2)"
	l_name="$(echo "$skill" | cut -sf3)"
	t_name="$(echo "$skill" | cut -sf4)"
	t_url="$(echo "$skill" | cut -sf5)"
	if [ "$pass" = "2" ]; then
		if [ -n "$t_name" ]; then
			printf "\t<h3 class=\"skill-header\"><a href=\"%s\">%s</a>%s [<a href=\"%s\">%s</a>]</h3>\n" "$(url_escape "$url")" "$(html_escape "$name")" "$(html_escape "$l_name")" "$(url_escape "$t_url")" "$(html_escape "$t_name")"
		else
			printf "\t<h3 class=\"skill-header\"><a href=\"%s\">%s</a>%s</h3>\n" "$(url_escape "$url")" "$(html_escape "$name")" "$(html_escape "$l_name")"
		fi
		printf "\t<ul>\n"
	fi
	skills_cnt=$((skills_cnt + 1))
	scan_state="skill_notes"
}

next_element() {
	if echo "$1" | grep -q "^-\\+$"; then
		if [ "$scan_state" = "after_general_info" ]; then
			scan_state="start_links_list"
		elif [ "$scan_state" = "after_links_list" ]; then
			scan_state="last_update"
		else
			scan_state="after_separator"
		fi
		return
	fi
	if echo "$1" | grep -q "^## \\*\\*"; then
		start_section "$1"
	elif [ "$scan_state" = "after_links_list" ]; then
		die "Missed a separator?"
	else
		start_skill "$1"
	fi
}

notes_line() {
	local list_item
	list_item="$(ul_element_parts "$1" "*")"
	local name
	name="$(echo "$list_item" | cut -sf1)"
	if [ -z "$name" ]; then
		die "Incorrect notes string"
	fi
	local value
	value="$(link_element_parts "$(echo "$list_item" | cut -sf2)")"
	local ancor
	ancor="$(echo "$value" | cut -sf1)"
	if [ "$pass" = "2" ]; then
		if [ -z "$ancor" ]; then
			output_li "$name" "$value"
		else
			local url
			url="$(echo "$value" | cut -sf2)"
			printf "\t\t<li>%s: <a href=\"%s\">%s</a></li>\n" "$(html_escape "$name")" "$(url_escape "$url")" "$(html_escape "$ancor")"
		fi
	fi
	scan_state="skill_lessons"
}

lessons_line() {
	local list_item
	list_item="$(ul_element_parts "$1" "*")"
	local name
	name="$(echo "$list_item" | cut -sf1)"
	local value
	value="$(echo "$list_item" | cut -sf2 | grep "^[[:digit:]]\\+$")"
	if [ -z "$name" ] || [ -z "$value" ]; then
		die "Incorrect lessons count string"
	fi
	if [ "$pass" = "2" ]; then
		output_li "$name" "$value"
	fi
	scan_state="skill_words"
}

voice_line() {
	if [ "$pass" = "2" ]; then
		output_li "$1" "$2"
	fi
	scan_state="skill_words"
}

words_line() {
	local name
	name="$(echo "$1" | sed "s|^\\* \\(.\\+\\):$|\\1\\t|" | cut -sf1)"
	if [ -z "$name" ]; then
		local list_item
		list_item="$(ul_element_parts "$1" "*")"
		name="$(echo "$list_item" | cut -sf1)"
		if [ -z "$name" ]; then
			die "Incorrect words string"
		fi
		local value
		value="$(echo "$list_item" | cut -sf2)"
		if echo "$value" | grep -q ".[0-9]%$"; then
			# It looks as if it is an optional string "Voice acting"
			voice_line "$name" "$value"
			return
		fi
		if [ "$pass" = "2" ]; then
			output_li "$name" "$value"
		fi
		end_skill
		return
	fi
	if [ "$pass" = "2" ]; then
		printf "\t\t<li>%s:\n" "$(html_escape "$name")"
		printf "\t\t\t<ol>\n"
	fi
	scan_state="lesson_words"
}

word_list_line() {
	local words
	words="$(echo "$1" | sed "s|^    [[:digit:]]\\+\\. \\(.\\+\\)$|\\1\\t|" | cut -sf1)"
	if [ -z "$words" ]; then
		die "Incorrect word list string"
	fi
	if [ "$pass" = "2" ]; then
		printf "\t\t%s\n" "$(output_li "$words")"
	fi
}

end_word_list() {
	if [ "$pass" = "2" ]; then
		printf "\t\t\t</ol>\n"
		printf "\t\t</li>\n"
	fi
}

end_skill() {
	if [ "$pass" = "2" ]; then
		printf "\t</ul>\n"
	fi
	scan_state="skill_or_section"
}

start_general_info() {
	if [ "$pass" = "2" ]; then
		printf "\t<h2 id=\"information\">%s</h2>\n" "$(html_escape "$section")"
		printf "\t<ul>\n"
	fi
	scan_state="start_general_info"
}

general_info() {
	local list_item
	list_item="$(ul_element_parts "$1" "-")"
	local name
	name=$(echo "$list_item" | cut -sf1);
	if [ -z "$name" ]; then
		die "Incorrect general information string"
	fi
	if [ "$pass" = "2" ]; then
		local value
		value=$(echo "$list_item" | cut -sf2);
		output_li "$name" "$value"
	fi
	scan_state="general_info"
}

end_general_info() {
	if [ "$pass" = "2" ]; then
		printf "\t</ul>\n"
	fi
	scan_state="after_general_info"
}

links_list() {
	# just skip all the section
	if echo "$1" | grep -q "^- "; then
		scan_state="links_list"
	fi
}

last_update() {
	local item
	# shellcheck disable=SC2001
	item="$(echo "$1" | sed "s|^\(.\+\): \(.\+\)$|\1\t\2|")"
	local name
	name="$(echo "$item" | cut -sf1)"
	if [ -z "$name" ]; then
		die "Incorrect last update string"
	fi
	if [ "$pass" = "2" ]; then
		local value
		value="$(echo "$item" | cut -sf2)"
		printf "\t<p class=\"last-update\">%s: %s</p>\n" "$(html_escape "$name")" "$(html_escape "$value")"
	fi
}

end_document() {
	if [ "$pass" = "2" ]; then
		printf "</body>\n</html>\n"
	fi
}

processor() {
	while IFS= read -r line; do
		source_line=$((source_line + 1))
		if [ -n "$line" ] || [ "$scan_state" = "skill_lessons" ] || [ "$scan_state" = "skill_words" ]; then
			case "$scan_state" in
				"start_document")
					start_document "$line"
					;;
				"start_section")
					start_section "$line"
					;;
				"start_skill")
					start_skill "$line"
					;;
				"skill_or_section")
					next_element "$line"
					;;
				"skill_notes")
					notes_line "$line"
					;;
				"skill_lessons")
					lessons_line "$line"
					;;
				"skill_words")
					words_line "$line"
					;;
				"lesson_words")
					word_list_line "$line"
					;;
				"after_separator")
					start_section "$line"
					;;
				"start_general_info")
					general_info "$line"
					;;
				"general_info")
					general_info "$line"
					;;
				"after_general_info")
					next_element "$line"
					;;
				"start_links_list")
					links_list "$line"
					;;
				"links_list")
					links_list "$line"
					;;
				"after_links_list")
					next_element "$line"
					;;
				"last_update")
					last_update "$line"
					;;
				*)
					die "Unknown scan state $scan_state"
					;;
			esac
		else
			if [ "$scan_state" = "lesson_words" ]; then
				end_word_list
				end_skill
			elif [ "$scan_state" = "general_info" ]; then
				end_general_info
			elif [ "$scan_state" = "links_list" ]; then
				scan_state="after_links_list"
			fi
		fi
	done < <(cat "$source")

	if [ ! "$scan_state" = "last_update" ]; then
		die "Unexpected end of file"
	fi
	end_document
}

processor

pass=2
source_line=0
scan_state="start_document"
processor

exit 0

